---
import {
  getAndPopulateTransactions,
  type PopulatedTxnData,
} from '@/server/utils';
import { constructTxnHtml } from '@/utils/html';

// TODO: fix fields
const transactions = (
  await getAndPopulateTransactions().match(
    (ok) => ok,
    (err) => {
      console.error(err);
      return [];
    },
  )
).filter((x) => x !== null) as Array<PopulatedTxnData>;
---

<column id="transactions" is-="typography-block">
  {transactions.reverse().map((transaction) => (
    <rendered-transaction
      data-txn-id={transaction.txnLink.txnId}
      data-op-return={transaction.txnLink.data.data}
      box-="square contain:!top"
      set:html={constructTxnHtml(transaction)}
    />
  ))}
</column>

<style is:global>
  #transactions {
    flex-direction: column-reverse;
    gap: 1lh;
    padding: 1lh 2ch;
  }

  #txn-op-return {
    background-color: var(--background1);
    padding: 1lh 1ch;

    pre {
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow: scroll;
      max-height: 12ch;
    }
  }

  details {
    summary {
      background-color: var(--background1);
      padding: 0 1ch;
      cursor: pointer;
    }

    &[open] summary, & summary:hover {
      background-color: var(--background2);
    }

    column {
      background-color: var(--background1);
      padding: 1lh 1ch;
    }
  }  

  rendered-transaction {
    --box-border-color: var(--background2);
    --box-border-width: 1px;
    padding-left: 2ch;
    padding-right: 2ch;
    paddint-bottom: 1lh;
    flex-direction: column;
    display: flex;
    gap: 1lh;

    &::after {
      z-index: -2;
      content: "";
      position: absolute;
      top: calc(50% + 0.5lh);
      left: calc(50% + 1ch);
      translate: -50% -50%;
      width: calc(100% - 1ch + 2px);
      height: calc(100% - 1lh + 2px);
      border: solid var(--box-border-width) var(--background1);
      clip-path: polygon(0 100%, 100% 100%, 100% 0, calc(100% - 1ch) 0, calc(100% - 10.5ch) calc(100% - 1lh), 0 calc(100% - 0.5lh));
    }

    img {
      max-width: 600px;
      max-height: 600px;
    }
  }
</style>

<script>
  import type { PopulatedTxnData } from '@/server/utils';
  import { constructTxnHtml } from '@/utils/html';
  import { thenJson, throughSchema } from '@/utils/neverthrow';
  import { err, ok, Result, ResultAsync } from 'neverthrow';
  import { z } from 'zod';

  const transactionsContainer = document.getElementById('transactions') as HTMLElement;

  const mempoolTxnIdsSchema = z.object({
    "mempool-txids": z.object({
      sequence: z.number(),
      added: z.array(z.string()),
      removed: z.array(z.string()),
      mined: z.array(z.string()),
      replaced: z.array(z.string()),
    })
  })

  const ws = new WebSocket('wss://mempool.space/api/v1/ws');

  ws.onopen = () => {
    ws.send(JSON.stringify({ "track-mempool-txids": true }));
    console.log('opened');
  };

  ws.onmessage = async (event) => {
    const data = Result.fromThrowable(() => JSON.parse(event.data), () => new Error('Invalid JSON'))()
      .andThen(throughSchema(mempoolTxnIdsSchema)).unwrapOr(null)

    if(!data) return;

    const txIds = data["mempool-txids"]

    if(txIds.added.length > 0) {
      console.log(txIds.added);
      // TODO: populate with mempool txn data as well
      const assignedTxns = await ResultAsync.fromPromise(
        fetch('/api/assign-txns', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            txIds: txIds.added,
          }),
        }), 
        () => new Error('Failed to fetch assigned txns')
      )
      .andThen(thenJson)
      .andThen(json => {
        if(json.success) {
          return ok(json.data as Array<PopulatedTxnData>)
        } else {
          return err(new Error(json.message))
        }
        }).match(ok => ok, err => {
          console.error(err);
          return [];
        })

      for(const txn of assignedTxns) {
        const txnEl = document.createElement('rendered-transaction');

        txnEl.setAttribute('data-txn-id', txn.txnLink.txnId);
        txnEl.setAttribute('box-', 'square contain:!top');
        txnEl.setAttribute('data-op-return', txn.txnLink.data.data);
        txnEl.innerHTML = constructTxnHtml(txn);

        transactionsContainer.appendChild(txnEl);
      }

      // remove first child of transactionsContainer if there are more than 50 children
      const txnItems = transactionsContainer.querySelectorAll('rendered-transaction');
      if(txnItems.length > 50) {
        transactionsContainer.removeChild(txnItems[0]);
      }
    }
  };

  ws.onerror = (error) => {
    console.error('WebSocket error:', error);
  };

  ws.onclose = (event) => {
    console.log('WebSocket closed:', event.code, event.reason);
  };
</script>

<script>
  import DOMPurify from 'isomorphic-dompurify';

  const clean = (dirty: string) => DOMPurify.sanitize(dirty);

  class RenderedTransaction extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const txid = this.getAttribute('data-txn-id');

      console.log(txid);

      this.querySelector('#copy-id')!.addEventListener('click', () => {
        navigator.clipboard.writeText(txid ?? '');
      });

      this.updateContent();

      const imgOption = document.querySelector('#option-images') as HTMLInputElement;
      const vidOption = document.querySelector('#option-videos') as HTMLInputElement;
      const htmlOption = document.querySelector('#option-html') as HTMLInputElement;
      const jsOption = document.querySelector('#option-js') as HTMLInputElement;

      imgOption.addEventListener('change', () => {
        this.updateContent();
      });
      vidOption.addEventListener('change', () => {
        this.updateContent();
      });
      htmlOption.addEventListener('change', () => {
        this.updateContent();
      });
      jsOption.addEventListener('change', () => {
        this.updateContent();
      });
    }

    updateContent() {
      const imgEnabled = (document.querySelector('#option-images') as HTMLInputElement).checked;
      const vidEnabled = (document.querySelector('#option-videos') as HTMLInputElement).checked;
      const htmlEnabled = (document.querySelector('#option-html') as HTMLInputElement).checked;
      const jsEnabled = (document.querySelector('#option-js') as HTMLInputElement).checked;

      const opReturn = this.getAttribute('data-op-return');
      const opReturnContent = this.querySelector('#txn-op-return') as HTMLElement;

      if(!opReturn) return;

      const isVideo = opReturn.startsWith('data:video')
      const isImage = opReturn.startsWith('data:image')

      if(isVideo && vidEnabled) {
        opReturnContent.innerHTML = `<video controls><source src="${opReturn}"></video>`;
      } else if(isImage && imgEnabled) {
        opReturnContent.innerHTML = `<img src="${opReturn}">`;
      } else if(htmlEnabled) {
        opReturnContent.innerHTML = '';
        if (jsEnabled) {
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = opReturn;

          const scripts = tempDiv.querySelectorAll('script');
          scripts.forEach(oldScript => {
            const newScript = document.createElement('script');
            // Copy attributes
            for (const attr of oldScript.attributes) {
              newScript.setAttribute(attr.name, attr.value);
            }
            // Copy code
            newScript.textContent = oldScript.textContent;
            // Append to the right place
            document.body.appendChild(newScript);
            // Optionally remove the old script from tempDiv
            oldScript.parentNode?.removeChild(oldScript);
          });

          // Now append the rest of the content (without the scripts)
          opReturnContent.append(...tempDiv.childNodes);
        } else {
          opReturnContent.innerHTML = clean(opReturn);
        }
      } else {
        opReturnContent.innerHTML = ``;
        const pre = document.createElement('pre');
        pre.innerText = opReturn;
        opReturnContent.appendChild(pre);
      }
    }
  }

  customElements.define('rendered-transaction', RenderedTransaction);
</script>
